from telethon import events
from .. import loader, utils

@loader.tds
class ReplyMod(loader.Module):
    """–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —Å —Ä–µ–∞–∫—Ü–∏–µ–π üí§ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ –õ–°"""

    strings = {
        "name": "Reply",
        "enabled": "‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω",
        "disabled": "‚ùå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω",
        "no_message": "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.reply set <—Ç–µ–∫—Å—Ç>`",
        "set_message": "‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n{}",
        "usage": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n.reply on - –≤–∫–ª—é—á–∏—Ç—å\n.reply off - –≤—ã–∫–ª—é—á–∏—Ç—å\n.reply set <—Ç–µ–∫—Å—Ç> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
    }

    def __init__(self):
        self.config = {
            "enabled": False,
            "message": None
        }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.config["enabled"] = self.db.get(self.name, "enabled", False)
        self.config["message"] = self.db.get(self.name, "message", None)

    @loader.unrestricted
    async def replycmd(self, message):
        args = utils.get_args_raw(message)
        if not args:
            await message.edit(self.strings["usage"])
            return

        cmd, *text = args.split(" ", 1)
        cmd = cmd.lower()

        if cmd == "on":
            if not self.config["message"]:
                await message.edit(self.strings["no_message"])
                return
            self.config["enabled"] = True
            self.db.set(self.name, "enabled", True)
            await message.edit(self.strings["enabled"])

        elif cmd == "off":
            self.config["enabled"] = False
            self.db.set(self.name, "enabled", False)
            await message.edit(self.strings["disabled"])

        elif cmd == "set":
            if not text:
                await message.edit("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `.reply set`")
                return
            msg = text[0].strip()
            self.config["message"] = msg
            self.db.set(self.name, "message", msg)
            await message.edit(self.strings["set_message"].format(msg))

        else:
            await message.edit(self.strings["usage"])

    @loader.ratelimit
    async def watcher(self, message):
        if not self.config["enabled"]:
            return

        if message.out:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –õ–°
        if not message.is_private:
            return

        if not message.text:
            return

        # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é
        try:
            await message.react("üí§")
        except Exception:
            pass

        # –û—Ç–≤–µ—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º
        try:
            await message.reply(self.config["message"])
        except Exception:
            pass