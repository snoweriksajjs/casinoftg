from .. import loader, utils
from telethon.tl.types import Message

@loader.tds
class ReplyMod(loader.Module):
    """–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤ –õ–° —Å —Ä–µ–∞–∫—Ü–∏–µ–π üí§ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º"""

    strings = {
        "name": "Reply",
        "enabled": "‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤–∫–ª—é—á—ë–Ω",
        "disabled": "‚ùå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω",
        "no_message": "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π `.reply set <—Ç–µ–∫—Å—Ç>`",
        "set_message": "‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞:\n{}",
        "usage": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n.reply on\n.reply off\n.reply set <—Ç–µ–∫—Å—Ç>"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue("enabled", False, lambda: "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫"),
            loader.ConfigValue("message", "", lambda: "–°–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞")
        )

    @loader.unrestricted
    async def replycmd(self, message: Message):
        args = utils.get_args_raw(message)

        if not args:
            await message.edit(self.strings("usage"))
            return

        cmd, *rest = args.split(" ", 1)
        cmd = cmd.lower()

        if cmd == "on":
            if not self.config["message"]:
                await message.edit(self.strings("no_message"))
                return
            self.config["enabled"] = True
            await message.edit(self.strings("enabled"))

        elif cmd == "off":
            self.config["enabled"] = False
            await message.edit(self.strings("disabled"))

        elif cmd == "set":
            if not rest:
                await message.edit("‚ö†Ô∏è –£–∫–∞–∂–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ `.reply set <—Ç–µ–∫—Å—Ç>`")
                return
            msg = rest[0].strip()
            self.config["message"] = msg
            await message.edit(self.strings("set_message").format(msg))

        else:
            await message.edit(self.strings("usage"))

    async def watcher(self, message: Message):
        if (
            not self.config["enabled"]
            or message.out
            or not message.is_private
            or not message.text
        ):
            return

        try:
            await message.react("üí§")
        except:
            pass

        try:
            await message.reply(self.config["message"])
        except:
            pass